library(twitteR)
install.packages("twitteR")
install.packages("graphTweets")
library(tidyverse)
api_key = 'qjrxTtjGWzf2WewvRgrBmRqcC'
api_secret = 'EyHZAcmFUNwBVHMgpkfTQ18W0npSqjNPj8qU1uZ7MH4Ar5E7xb'
access_token = "56173323-ViSSDypCPtlnKgzZUqLQuVOv1al8zBkD46teok9w8"
accees_token_secret = "XRFDZzA4jpUXHaRiyDFxtA0utP1LBmKvpalFxNKKD2QiS"
setup_twitter_oauth(api_key,api_secret,access_token,accees_token_secret)
library(twitteR)
library(graphTweets)
api_key = 'qjrxTtjGWzf2WewvRgrBmRqcC'
api_secret = 'EyHZAcmFUNwBVHMgpkfTQ18W0npSqjNPj8qU1uZ7MH4Ar5E7xb'
access_token = "56173323-ViSSDypCPtlnKgzZUqLQuVOv1al8zBkD46teok9w8"
accees_token_secret = "XRFDZzA4jpUXHaRiyDFxtA0utP1LBmKvpalFxNKKD2QiS"
setup_twitter_oauth(api_key,api_secret,access_token,accees_token_secret)
tweets <- searchTwitter("#ECNeph",since = 2017-08-27)
tweets <- twListToDF(tweets)
tweets <- searchTwitter("#ECNeph",since = "2017-08-27")
tweets <- searchTwitter("#ECNeph",since = "2017-08-27", n=300)
tweets <- twListToDF(tweets)
edges <- getEdges(data = tweets, tweets = "text", source = "screenName")
nodes <- getNodes(edges)
g <- igraph::graph.data.frame(edges, directed=TRUE, vertices = nodes)
plot(g)
nodes
edges
install.packages("networkD3")
library(newtworkD3)
library(networkD3)
networkData <- data.frame(edges$source,edges$target)
simpleNetwork(networkData)
?simpleNetwork
simpleNetwork(networkData, Source = 1, Target = 2, height = 1600, width = 1200,
linkDistance = 50, charge = -30, fontSize = 2, fontFamily = "serif",
linkColour = "#666", nodeColour = "#3182bd", opacity = 0.6, zoom = T)
simpleNetwork(networkData, Source = 1, Target = 2, height = 1600, width = 1200,
linkDistance = 50, charge = -30, fontSize = 5, fontFamily = "serif",
linkColour = "#666", nodeColour = "#3182bd", opacity = 0.6, zoom = T)
simpleNetwork(networkData, Source = 1, Target = 2,
linkDistance = 20, charge = -30, fontSize = 5, fontFamily = "serif",
linkColour = "#666", nodeColour = "#3182bd", opacity = 0.6, zoom = T)
sankeyNetwork(Links = edges$target, Nodes = Energy$source, Source = "source",
Target = "target", Value = "value", NodeID = "name",
units = "TWh", fontSize = 12, nodeWidth = 30)
data(MisLinks)
m =data(MisLinks)
data(MisLinks)
data(MisNodes)
forceNetwork(Links = MisLinks, Nodes = MisNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", opacity = 0.8)
View(MisLinks)
View(MisNodes)
View(MisNodes)
hc <- hclust(dist(USArrests), "ave")
dendroNetwork(hc, height = 600)
load("E:/Downloads/RDataMining-Tweets-20160203.rdata")
retweeter_poster = cbind(edges$source, edges$target)
rt_graph = graph.edgelist(retweeter_poster)
library(igraph)
rt_graph = graph.edgelist(retweeter_poster)
retweeter_poster = cbind(edges$target, edges$source)
rt_graph = graph.edgelist(retweeter_poster)
head(edges$target,10)
head(edges$source,10)
who_post = list(edges$source)
who_retweet = list(edges$target)
who_post = unlist(who_post)
who_retweet = unlist(who_retweet)
retweeter_poster = cbind(who_retweet, who_post)
rt_graph = graph.edgelist(retweeter_poster)
g <- graph.data.frame(edges, directed = T)
# Assign labels to the graph (=people's names)
V(g)$label <- V(g)$name
# Plot the graph using plot() or tkplot().
tkplot(g)
plot(g)
ig <- graph.adjacency(edges, mode="directed", weighted=TRUE)
plot(ig)
set.seed(1492)
l <- layout.fruchterman.reingold(g, niter=5000, area=vcount(ig)^4*10)
set.seed(1492)
l <- layout.fruchterman.reingold(g, niter=5000, area=vcount(g)^4*10)
plot(g, layout=l,
edge.arrow.size=0.5,
vertex.label.cex=0.75,
vertex.label.family="Helvetica",
vertex.label.font=2,
vertex.shape="circle",
vertex.size=1,
vertex.label.color="black",
edge.width=0.5)
l <- layout.fruchterman.reingold(g, niter=5000)
plot(g, layout=l,
edge.arrow.size=0.5,
vertex.label.cex=0.75,
vertex.label.family="Helvetica",
vertex.label.font=2,
vertex.shape="circle",
vertex.size=1,
vertex.label.color="black",
edge.width=0.5)
lo <- layout.fruchterman.reingold(g, repulserad = vcount(g)^2.8,
area = vcount(g)^2.3, niter = 1000)
plot(g, layout = lo, vertex.size = 3, vertex.frame.color = NULL,
vertex.label.dist = 0.5, vertex.label.cex = 0.7, edge.width = 0.5)
lay.kk <- layout.kamada.kawai(g, niter=1000, kkconst=50)
plot.igraph(g, lay=lay.kk, vertex.label=NA, vertex.size=2, vertex.color="black")
lay.kk <- layout.kamada.kawai(g, iter=1000, kkconst=50)
node.size= c(10,10,10)
plot(g, vertex.size=node.size*0.25)
wrap_strings <- function(vector_of_strings,width){
as.character(sapply(vector_of_strings, FUN=function(x){
paste(strwrap(x, width=width), collapse="\n")
}))
}
V(g)$label = wrap_strings(V(g)$label, 12)
library(igraph)
# Apply the function to wrap the node labels
V(g)$label = wrap_strings(V(g)$label, 12)
V(g)$label.cex = 0.8
layout.by.attr <- function(graph, wc, cluster.strength=1,layout=layout.auto) {
g <- graph.edgelist(get.edgelist(graph)) # create a lightweight copy of graph w/o the attributes.
E(g)$weight <- 1
attr <- cbind(id=1:vcount(g), val=wc)
g <- g + vertices(unique(attr[,2])) + igraph::edges(unlist(t(attr)), weight=cluster.strength)
l <- layout(g, weights=E(g)$weight)[1:vcount(graph),]
return(l)
}
## Make layout reproducible. Different values will produce different layouts,
##  but setting a seed will allow you to reproduce a layout if you like it.
set.seed(3)
plot(g, vertex.shape="none", vertex.size=1,
vertex.label.color=ifelse(V(g)$value=="l", "blue", "red"),
layout=layout.by.attr(g, wc=1))
plot(g)
# Apply the function to wrap the node labels
V(g)$label = wrap_strings(V(g)$label, 12)
## Shrink font
V(g)$label.cex = 0.8
plot(g)
## Shrink font
V(g)$label.cex = 0.8
layout.by.attr <- function(graph, wc, cluster.strength=1,layout=layout.auto) {
g <- graph.edgelist(get.edgelist(graph)) # create a lightweight copy of graph w/o the attributes.
E(g)$weight <- 1
attr <- cbind(id=1:vcount(g), val=wc)
g <- g + vertices(unique(attr[,2])) + igraph::edges(unlist(t(attr)), weight=cluster.strength)
l <- layout(g, weights=E(g)$weight)[1:vcount(graph),]
return(l)
}
plot(g, vertex.shape="none", vertex.size=1,
vertex.label.color=ifelse(V(g)$value=="l", "blue", "red"),
layout=layout.by.attr(g, wc=1))
plot(g)
plot(g, layout=layout.by.attr(g, wc=1))
h <- graph.edgelist(get.edgelist(g))
graph.edgelist(g)
g= as.matrix(g)
graph.edgelist(g)
g <- graph.data.frame(edges, directed = T)
g= as.matrix(edges$source,edges$target
graph.edgelist(g)
graph= as.matrix(edges$source,edges$target)
h <- graph.edgelist(get.edgelist(graph))
k = plot(graph)
g <- graph.data.frame(edges, directed = T)
# Assign labels to the graph (=people's names)
V(g)$label <- V(g)$name
# Plot the graph using plot() or tkplot().
tkplot(g)
g <- graph.data.frame(edges, directed = T)
# Assign labels to the graph (=people's names)
V(g)$label <- V(g)$name
plot(g)
k= plot(g)
wrap_strings <- function(vector_of_strings,width){
as.character(sapply(vector_of_strings, FUN=function(x){
paste(strwrap(x, width=width), collapse="\n")
}))
}
# Apply the function to wrap the node labels
V(g)$label = wrap_strings(V(g)$label, 12)
## Shrink font
V(g)$label.cex = 0.8
layout.by.attr <- function(graph, wc, cluster.strength=1,layout=layout.auto) {
g <- graph.edgelist(get.edgelist(graph)) # create a lightweight copy of graph w/o the attributes.
E(g)$weight <- 1
attr <- cbind(id=1:vcount(g), val=wc)
g <- g + vertices(unique(attr[,2])) + igraph::edges(unlist(t(attr)), weight=cluster.strength)
l <- layout(g, weights=E(g)$weight)[1:vcount(graph),]
return(l)
}
set.seed(3)
plot(k, vertex.shape="none", vertex.size=1,
vertex.label.color=ifelse(V(g)$value=="l", "blue", "red"),
layout=layout.by.attr(g, wc=1))
plot(g, vertex.shape="none", vertex.size=1,
vertex.label.color=ifelse(V(g)$value=="l", "blue", "red"),
layout=layout.by.attr(g, wc=1))
library(twitteR)
library(graphTweets)
library(igraph)
library(qgraph)
library(tidyverse)
library(networkD3)
install.packages("networkD3")
library(networkD3)
g <- igraph::graph.data.frame(edges, directed=TRUE, vertices = nodes)
plot(g)
m <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(g),
area=8*(vcount(g)^2),repulse.rad=(vcount(g)^3.1))
e <- get.edgelist(g)
m <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(g),
area=8*(vcount(g)^2),repulse.rad=(vcount(g)^3.1))
plot(g,layout=m,vertex.size=4,vertex.label=NA)
mtext("qgraph.layout.fruchtermanreingold modified", side=1)
e <- get.edgelist(g)
l <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(g))
e <- get.edgelist(g,names=FALSE)
l <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(g))
plot(g,layout=l,vertex.size=4,vertex.label=NA)
plot(g,layout=l,vertex.size=4,vertex.label=NA)
plot(g,layout=l,vertex.size=4,vertex.label=NA)
e <- get.edgelist(g,names=FALSE)
l <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(g))
plot(g,layout=l,vertex.size=4)
l <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(g),
area=8*(vcount(g)^2),repulse.rad=(vcount(g)^3.1))
plot(g,layout=l,vertex.size=4,vertex.label=NA)
layout.by.attr <- function(graph, wc, cluster.strength=1,layout=layout.auto) {
g <- graph.edgelist(get.edgelist(graph)) # create a lightweight copy of graph w/o the attributes.
E(g)$weight <- 1
attr <- cbind(id=1:vcount(g), val=wc)
g <- g + vertices(unique(attr[,2])) + igraph::edges(unlist(t(attr)), weight=cluster.strength)
l <- layout(g, weights=E(g)$weight)[1:vcount(graph),]
return(l)
}
plot(g, vertex.shape="none", vertex.size=1,
vertex.label.color=ifelse(V(g)$value=="l", "blue", "red"),
layout=layout.by.attr(g, wc=1))
net <- simplify(g, remove.multiple = F, remove.loops = T)
net <- graph.data.frame(edges, directed=T)
net <- simplify(net, remove.multiple = F, remove.loops = T)
net <- simplify(net)
deg <- degree(net, mode="all")
V(net)$size <- deg*0.05 + 1
V(net)[name == "arvindcanchi"]$size <- 15
plot(net, edge.arrow.size=0.1,
vertex.label = ifelse(V(net)$size >= 15, V(net)$name, NA))
plot(net, edge.arrow.size=0.1,
vertex.label = ifelse(V(net)$size >= 10, V(net)$name, NA))
plot(net, edge.arrow.size=0.1,
vertex.label = ifelse(V(net)$size >= 15, V(net)$name, NA))
is_simple(g)
plot(net, edge.arrow.size=.4,vertex.label=NA)
g <- igraph::graph.data.frame(edges, directed=TRUE, vertices = nodes)
plot(g)
plot(g, edge.arrow.size=.4,vertex.label=NA)
net=g
deg <- degree(net, mode="all")
V(net)$size <- deg*3
V(net)$size <- V(net)$audience.size*0.6
plot(g, layout=layout.circle, vertex.size=4,
vertex.label.dist=0.5, vertex.color="red", edge.arrow.size=0.5)
plot
(g, layout=layout.auto, vertex.size=4,
vertex.label.dist=0.5, vertex.color="red", edge.arrow.size=0.5)
plot(g, layout=layout.auto, vertex.size=4,
vertex.label.dist=0.5, vertex.color="red", edge.arrow.size=0.5)
plot(g, layout=layout.auto, vertex.size=4,
vertex.label.dist=0.9, vertex.color="red", edge.arrow.size=0.5)
plot(g, layout=layout.auto, vertex.size=4,
vertex.label.dist=0.9, vertex.color="red", edge.arrow.size=0.9)
deg = degree(g,mode = "all")
deg = degree(g,mode = "all")
plot(g, layout=layout.auto, vertex.size=deg*3,
vertex.label.dist=0.9, vertex.color="red", edge.arrow.size=0.9)
V(g)$size<- deg*0.05 + 1
plot(g, layout=layout.auto,
vertex.label.dist=0.9, vertex.color="red", edge.arrow.size=0.9)
plot(g, layout=layout.auto, vertex.size=4,
vertex.label.dist=0.9, vertex.color="red", edge.arrow.size=0.9)
plot(g, layout=layout.random, vertex.size=4,
vertex.label.dist=0.5, vertex.color="red", edge.arrow.size=0.5)
plot(g, rescale = FALSE, ylim=c(1,4),xlim=c(-17,24), asp = 0)
plot(g, rescale = FALSE, ylim=c(-4,4),xlim=c(-17,24), asp = 0)
plot(g, rescale = FALSE, ylim=c(2,4),xlim=c(-17,24), asp = 0)
plot(g, rescale = FALSE, ylim=c(0,4),xlim=c(-17,24), asp = 0)
plot(g, rescale = FALSE, ylim=c(1,4),xlim=c(-24,24), asp = 0)
plot(g, rescale = FALSE, ylim=c(1,4),xlim=c(-17,24), asp = 0)
V(g)$degree <- degree(g, mode="all")
cut.off <- mean(V(g)$degree)
sub <- induced_subgraph(g, which(V(g)$degree>cut.off))
plot(sub, vertex.shape="none", vertex.size=1,
vertex.label.color=ifelse(V(sub)$value=="l", "blue", "red"),
layout=layout_with_fr)
wrap_strings <- function(vector_of_strings,width){
as.character(sapply(vector_of_strings, FUN=function(x){
paste(strwrap(x, width=width), collapse="\n")
}))
}
# Apply the function to wrap the node labels
V(sub)$label = wrap_strings(V(sub)$label, 12)
## Shrink font
V(sub)$label.cex = 0.8
# Function to increase node separation (for explanatory details, see the link below)
# Source: http://stackoverflow.com/a/28722680/496488
layout.by.attr <- function(graph, wc, cluster.strength=1,layout=layout.auto) {
g <- graph.edgelist(get.edgelist(graph)) # create a lightweight copy of graph w/o the attributes.
E(g)$weight <- 1
attr <- cbind(id=1:vcount(g), val=wc)
g <- g + vertices(unique(attr[,2])) + igraph::edges(unlist(t(attr)), weight=cluster.strength)
l <- layout(g, weights=E(g)$weight)[1:vcount(graph),]
return(l)
}
plot(sub, vertex.shape="none", vertex.size=1,
vertex.label.color=ifelse(V(sub)$value=="l", "blue", "red"),
layout=layout.by.attr(sub, wc=1))
plot(sub)
plot(sub)
plot(sub, vertex.shape="none", vertex.size=1,
layout=layout.by.attr(sub, wc=1))
V(sub)$value
plot(sub)
plot(sub,vertex.label.dist=0.9)
plot(sub,vertex.label.dist=1.3)
plot(sub,vertex.label.dist=1.3,layout=layout.by.attr(sub, wc=1))
plot(sub,layout=layout.by.attr(sub, wc=1))
plot(sub)
cut.off
sub <- induced_subgraph(g, which(V(g)$degree>50))
plot(sub)
plot(sub,vertex.label.distance=1.2)
plot(sub,layout=layout.by.attr(sub, wc=1))
l <- layout.fruchterman.reingold(g, niter=5000)
plot(g, layout=l,
edge.arrow.size=0.5,
vertex.label.cex=0.75,
vertex.label.family="Helvetica",
vertex.label.font=2,
vertex.shape="circle",
vertex.size=1,
vertex.label.color="black",
edge.width=0.5)
lo <- layout.fruchterman.reingold(g, repulserad = vcount(g)^2.8,
area = vcount(g)^2.3, niter = 1000)
lo <- qgraph::layout.fruchterman.reingold(g, repulserad = vcount(g)^2.8,
area = vcount(g)^2.3, niter = 1000)
plot(g
lo <- qgraph.layout.fruchterman.reingold(g, repulserad = vcount(g)^2.8,
area = vcount(g)^2.3, niter = 1000)
plo
library(qgraph)
E(sub)$width <- 1+E(sub)$weight/12
plot(sub,vertex.label.distance=1.2)
plot(sub,layout=layout.by.attr(sub, wc=1)) # prevents text collision
V(g)$degree <- degree(g, mode="all")
cut.off <- mean(V(g)$degree)
sub <- induced_subgraph(g, which(V(g)$degree>mean))
plot(sub,layout=layout.by.attr(sub, wc=1)) # prevents text collision
E(sub)$width <- 1+E(sub)$weight/12
plot(sub,layout=layout.by.attr(sub, wc=1)) # prevents text collision
lo <- qgraph.layout.fruchterman.reingold(edges, repulserad = vcount(g)^2.8,
area = vcount(g)^2.3, niter = 1000)
lo <- qgraph.layout.fruchtermanreingold(edges, repulserad = vcount(g)^2.8,
area = vcount(g)^2.3, niter = 1000)
lo <- qgraph.layout.fruchtermanreingold(edges,
area = vcount(g)^2.3, niter = 1000)
plot(g, layout = lo, vertex.size = 3, vertex.frame.color = NULL,
vertex.label.dist = 0.5, vertex.label.cex = 0.7, edge.width = 0.5)
lo <- qgraph.layout.fruchtermanreingold(edges, qgraph::repulserad = vcount(g)^2.8,
area = vcount(g)^2.3, niter = 1000)
lo <- qgraph.layout.fruchtermanreingold(edges, repulse.rad = vcount(g)^2.8,
area = vcount(g)^2.3, niter = 1000)
str(edges)
m = as.matrix(edges)
lo <- qgraph.layout.fruchtermanreingold(m, repulse.rad = vcount(g)^2.8,
area = vcount(g)^2.3, niter = 1000)
m = get.edgelist(g)
lo <- qgraph.layout.fruchtermanreingold(m, repulse.rad = vcount(g)^2.8,
area = vcount(g)^2.3, niter = 1000)
m = as.matrix(m)
lo <- qgraph.layout.fruchtermanreingold(m, repulse.rad = vcount(g)^2.8,
area = vcount(g)^2.3, niter = 1000)
View(edges)
View(edges)
str(edges)
